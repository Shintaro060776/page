import {
  ExceptionOptionType as __ExceptionOptionType,
  LazyJsonString as __LazyJsonString,
} from "@smithy/smithy-client";
import { BraketServiceException as __BaseException } from "./BraketServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface ContainerImage {
  uri: string | undefined;
}
export declare const CompressionType: {
  readonly GZIP: "GZIP";
  readonly NONE: "NONE";
};
export type CompressionType =
  (typeof CompressionType)[keyof typeof CompressionType];
export interface ScriptModeConfig {
  entryPoint: string | undefined;
  s3Uri: string | undefined;
  compressionType?: CompressionType;
}
export interface AlgorithmSpecification {
  scriptModeConfig?: ScriptModeConfig;
  containerImage?: ContainerImage;
}
export interface GetDeviceRequest {
  deviceArn: string | undefined;
}
export declare const QueueName: {
  readonly JOBS_QUEUE: "JOBS_QUEUE";
  readonly QUANTUM_TASKS_QUEUE: "QUANTUM_TASKS_QUEUE";
};
export type QueueName = (typeof QueueName)[keyof typeof QueueName];
export declare const QueuePriority: {
  readonly NORMAL: "Normal";
  readonly PRIORITY: "Priority";
};
export type QueuePriority = (typeof QueuePriority)[keyof typeof QueuePriority];
export interface DeviceQueueInfo {
  queue: QueueName | undefined;
  queueSize: string | undefined;
  queuePriority?: QueuePriority;
}
export declare const DeviceStatus: {
  readonly OFFLINE: "OFFLINE";
  readonly ONLINE: "ONLINE";
  readonly RETIRED: "RETIRED";
};
export type DeviceStatus = (typeof DeviceStatus)[keyof typeof DeviceStatus];
export declare const DeviceType: {
  readonly QPU: "QPU";
  readonly SIMULATOR: "SIMULATOR";
};
export type DeviceType = (typeof DeviceType)[keyof typeof DeviceType];
export interface GetDeviceResponse {
  deviceArn: string | undefined;
  deviceName: string | undefined;
  providerName: string | undefined;
  deviceType: DeviceType | undefined;
  deviceStatus: DeviceStatus | undefined;
  deviceCapabilities: __LazyJsonString | string | undefined;
  deviceQueueInfo?: DeviceQueueInfo[];
}
export declare class InternalServiceException extends __BaseException {
  readonly name: "InternalServiceException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServiceException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface SearchDevicesFilter {
  name: string | undefined;
  values: string[] | undefined;
}
export interface SearchDevicesRequest {
  nextToken?: string;
  maxResults?: number;
  filters: SearchDevicesFilter[] | undefined;
}
export interface DeviceSummary {
  deviceArn: string | undefined;
  deviceName: string | undefined;
  providerName: string | undefined;
  deviceType: DeviceType | undefined;
  deviceStatus: DeviceStatus | undefined;
}
export interface SearchDevicesResponse {
  devices: DeviceSummary[] | undefined;
  nextToken?: string;
}
export interface CancelJobRequest {
  jobArn: string | undefined;
}
export declare const CancellationStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
};
export type CancellationStatus =
  (typeof CancellationStatus)[keyof typeof CancellationStatus];
export interface CancelJobResponse {
  jobArn: string | undefined;
  cancellationStatus: CancellationStatus | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface JobCheckpointConfig {
  localPath?: string;
  s3Uri: string | undefined;
}
export interface DeviceConfig {
  device: string | undefined;
}
export interface S3DataSource {
  s3Uri: string | undefined;
}
export interface DataSource {
  s3DataSource: S3DataSource | undefined;
}
export interface InputFileConfig {
  channelName: string | undefined;
  contentType?: string;
  dataSource: DataSource | undefined;
}
export declare const _InstanceType: {
  readonly ML_C4_2XLARGE: "ml.c4.2xlarge";
  readonly ML_C4_4XLARGE: "ml.c4.4xlarge";
  readonly ML_C4_8XLARGE: "ml.c4.8xlarge";
  readonly ML_C4_XLARGE: "ml.c4.xlarge";
  readonly ML_C5N_18XLARGE: "ml.c5n.18xlarge";
  readonly ML_C5N_2XLARGE: "ml.c5n.2xlarge";
  readonly ML_C5N_4XLARGE: "ml.c5n.4xlarge";
  readonly ML_C5N_9XLARGE: "ml.c5n.9xlarge";
  readonly ML_C5N_XLARGE: "ml.c5n.xlarge";
  readonly ML_C5_18XLARGE: "ml.c5.18xlarge";
  readonly ML_C5_2XLARGE: "ml.c5.2xlarge";
  readonly ML_C5_4XLARGE: "ml.c5.4xlarge";
  readonly ML_C5_9XLARGE: "ml.c5.9xlarge";
  readonly ML_C5_XLARGE: "ml.c5.xlarge";
  readonly ML_G4DN_12XLARGE: "ml.g4dn.12xlarge";
  readonly ML_G4DN_16XLARGE: "ml.g4dn.16xlarge";
  readonly ML_G4DN_2XLARGE: "ml.g4dn.2xlarge";
  readonly ML_G4DN_4XLARGE: "ml.g4dn.4xlarge";
  readonly ML_G4DN_8XLARGE: "ml.g4dn.8xlarge";
  readonly ML_G4DN_XLARGE: "ml.g4dn.xlarge";
  readonly ML_M4_10XLARGE: "ml.m4.10xlarge";
  readonly ML_M4_16XLARGE: "ml.m4.16xlarge";
  readonly ML_M4_2XLARGE: "ml.m4.2xlarge";
  readonly ML_M4_4XLARGE: "ml.m4.4xlarge";
  readonly ML_M4_XLARGE: "ml.m4.xlarge";
  readonly ML_M5_12XLARGE: "ml.m5.12xlarge";
  readonly ML_M5_24XLARGE: "ml.m5.24xlarge";
  readonly ML_M5_2XLARGE: "ml.m5.2xlarge";
  readonly ML_M5_4XLARGE: "ml.m5.4xlarge";
  readonly ML_M5_LARGE: "ml.m5.large";
  readonly ML_M5_XLARGE: "ml.m5.xlarge";
  readonly ML_P2_16XLARGE: "ml.p2.16xlarge";
  readonly ML_P2_8XLARGE: "ml.p2.8xlarge";
  readonly ML_P2_XLARGE: "ml.p2.xlarge";
  readonly ML_P3DN_24XLARGE: "ml.p3dn.24xlarge";
  readonly ML_P3_16XLARGE: "ml.p3.16xlarge";
  readonly ML_P3_2XLARGE: "ml.p3.2xlarge";
  readonly ML_P3_8XLARGE: "ml.p3.8xlarge";
  readonly ML_P4D_24XLARGE: "ml.p4d.24xlarge";
};
export type _InstanceType = (typeof _InstanceType)[keyof typeof _InstanceType];
export interface InstanceConfig {
  instanceType: _InstanceType | undefined;
  volumeSizeInGb: number | undefined;
  instanceCount?: number;
}
export interface JobOutputDataConfig {
  kmsKeyId?: string;
  s3Path: string | undefined;
}
export interface JobStoppingCondition {
  maxRuntimeInSeconds?: number;
}
export interface CreateJobRequest {
  clientToken?: string;
  algorithmSpecification: AlgorithmSpecification | undefined;
  inputDataConfig?: InputFileConfig[];
  outputDataConfig: JobOutputDataConfig | undefined;
  checkpointConfig?: JobCheckpointConfig;
  jobName: string | undefined;
  roleArn: string | undefined;
  stoppingCondition?: JobStoppingCondition;
  instanceConfig: InstanceConfig | undefined;
  hyperParameters?: Record<string, string>;
  deviceConfig: DeviceConfig | undefined;
  tags?: Record<string, string>;
}
export interface CreateJobResponse {
  jobArn: string | undefined;
}
export declare class DeviceRetiredException extends __BaseException {
  readonly name: "DeviceRetiredException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DeviceRetiredException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const HybridJobAdditionalAttributeName: {
  readonly QUEUE_INFO: "QueueInfo";
};
export type HybridJobAdditionalAttributeName =
  (typeof HybridJobAdditionalAttributeName)[keyof typeof HybridJobAdditionalAttributeName];
export interface GetJobRequest {
  jobArn: string | undefined;
  additionalAttributeNames?: HybridJobAdditionalAttributeName[];
}
export declare const JobEventType: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly DEPRIORITIZED_DUE_TO_INACTIVITY: "DEPRIORITIZED_DUE_TO_INACTIVITY";
  readonly DOWNLOADING_DATA: "DOWNLOADING_DATA";
  readonly FAILED: "FAILED";
  readonly MAX_RUNTIME_EXCEEDED: "MAX_RUNTIME_EXCEEDED";
  readonly QUEUED_FOR_EXECUTION: "QUEUED_FOR_EXECUTION";
  readonly RUNNING: "RUNNING";
  readonly STARTING_INSTANCE: "STARTING_INSTANCE";
  readonly UPLOADING_RESULTS: "UPLOADING_RESULTS";
  readonly WAITING_FOR_PRIORITY: "WAITING_FOR_PRIORITY";
};
export type JobEventType = (typeof JobEventType)[keyof typeof JobEventType];
export interface JobEventDetails {
  eventType?: JobEventType;
  timeOfEvent?: Date;
  message?: string;
}
export interface HybridJobQueueInfo {
  queue: QueueName | undefined;
  position: string | undefined;
  message?: string;
}
export declare const JobPrimaryStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly QUEUED: "QUEUED";
  readonly RUNNING: "RUNNING";
};
export type JobPrimaryStatus =
  (typeof JobPrimaryStatus)[keyof typeof JobPrimaryStatus];
export interface GetJobResponse {
  status: JobPrimaryStatus | undefined;
  jobArn: string | undefined;
  roleArn: string | undefined;
  failureReason?: string;
  jobName: string | undefined;
  hyperParameters?: Record<string, string>;
  inputDataConfig?: InputFileConfig[];
  outputDataConfig: JobOutputDataConfig | undefined;
  stoppingCondition?: JobStoppingCondition;
  checkpointConfig?: JobCheckpointConfig;
  algorithmSpecification: AlgorithmSpecification | undefined;
  instanceConfig: InstanceConfig | undefined;
  createdAt: Date | undefined;
  startedAt?: Date;
  endedAt?: Date;
  billableDuration?: number;
  deviceConfig?: DeviceConfig;
  events?: JobEventDetails[];
  tags?: Record<string, string>;
  queueInfo?: HybridJobQueueInfo;
}
export declare const SearchJobsFilterOperator: {
  readonly BETWEEN: "BETWEEN";
  readonly CONTAINS: "CONTAINS";
  readonly EQUAL: "EQUAL";
  readonly GT: "GT";
  readonly GTE: "GTE";
  readonly LT: "LT";
  readonly LTE: "LTE";
};
export type SearchJobsFilterOperator =
  (typeof SearchJobsFilterOperator)[keyof typeof SearchJobsFilterOperator];
export interface SearchJobsFilter {
  name: string | undefined;
  values: string[] | undefined;
  operator: SearchJobsFilterOperator | undefined;
}
export interface SearchJobsRequest {
  nextToken?: string;
  maxResults?: number;
  filters: SearchJobsFilter[] | undefined;
}
export interface JobSummary {
  status: JobPrimaryStatus | undefined;
  jobArn: string | undefined;
  jobName: string | undefined;
  device: string | undefined;
  createdAt: Date | undefined;
  startedAt?: Date;
  endedAt?: Date;
  tags?: Record<string, string>;
}
export interface SearchJobsResponse {
  jobs: JobSummary[] | undefined;
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface CancelQuantumTaskRequest {
  quantumTaskArn: string | undefined;
  clientToken?: string;
}
export interface CancelQuantumTaskResponse {
  quantumTaskArn: string | undefined;
  cancellationStatus: CancellationStatus | undefined;
}
export interface CreateQuantumTaskRequest {
  clientToken?: string;
  deviceArn: string | undefined;
  deviceParameters?: __LazyJsonString | string;
  shots: number | undefined;
  outputS3Bucket: string | undefined;
  outputS3KeyPrefix: string | undefined;
  action: __LazyJsonString | string | undefined;
  tags?: Record<string, string>;
  jobToken?: string;
}
export interface CreateQuantumTaskResponse {
  quantumTaskArn: string | undefined;
}
export declare class DeviceOfflineException extends __BaseException {
  readonly name: "DeviceOfflineException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DeviceOfflineException, __BaseException>
  );
}
export declare const QuantumTaskAdditionalAttributeName: {
  readonly QUEUE_INFO: "QueueInfo";
};
export type QuantumTaskAdditionalAttributeName =
  (typeof QuantumTaskAdditionalAttributeName)[keyof typeof QuantumTaskAdditionalAttributeName];
export interface GetQuantumTaskRequest {
  quantumTaskArn: string | undefined;
  additionalAttributeNames?: QuantumTaskAdditionalAttributeName[];
}
export interface QuantumTaskQueueInfo {
  queue: QueueName | undefined;
  position: string | undefined;
  queuePriority?: QueuePriority;
  message?: string;
}
export declare const QuantumTaskStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly COMPLETED: "COMPLETED";
  readonly CREATED: "CREATED";
  readonly FAILED: "FAILED";
  readonly QUEUED: "QUEUED";
  readonly RUNNING: "RUNNING";
};
export type QuantumTaskStatus =
  (typeof QuantumTaskStatus)[keyof typeof QuantumTaskStatus];
export interface GetQuantumTaskResponse {
  quantumTaskArn: string | undefined;
  status: QuantumTaskStatus | undefined;
  failureReason?: string;
  deviceArn: string | undefined;
  deviceParameters: __LazyJsonString | string | undefined;
  shots: number | undefined;
  outputS3Bucket: string | undefined;
  outputS3Directory: string | undefined;
  createdAt: Date | undefined;
  endedAt?: Date;
  tags?: Record<string, string>;
  jobArn?: string;
  queueInfo?: QuantumTaskQueueInfo;
}
export declare const SearchQuantumTasksFilterOperator: {
  readonly BETWEEN: "BETWEEN";
  readonly EQUAL: "EQUAL";
  readonly GT: "GT";
  readonly GTE: "GTE";
  readonly LT: "LT";
  readonly LTE: "LTE";
};
export type SearchQuantumTasksFilterOperator =
  (typeof SearchQuantumTasksFilterOperator)[keyof typeof SearchQuantumTasksFilterOperator];
export interface SearchQuantumTasksFilter {
  name: string | undefined;
  values: string[] | undefined;
  operator: SearchQuantumTasksFilterOperator | undefined;
}
export interface SearchQuantumTasksRequest {
  nextToken?: string;
  maxResults?: number;
  filters: SearchQuantumTasksFilter[] | undefined;
}
export interface QuantumTaskSummary {
  quantumTaskArn: string | undefined;
  status: QuantumTaskStatus | undefined;
  deviceArn: string | undefined;
  shots: number | undefined;
  outputS3Bucket: string | undefined;
  outputS3Directory: string | undefined;
  createdAt: Date | undefined;
  endedAt?: Date;
  tags?: Record<string, string>;
}
export interface SearchQuantumTasksResponse {
  quantumTasks: QuantumTaskSummary[] | undefined;
  nextToken?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
