import { BraketServiceException as __BaseException } from "./BraketServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const CompressionType = {
    GZIP: "GZIP",
    NONE: "NONE",
};
export const QueueName = {
    JOBS_QUEUE: "JOBS_QUEUE",
    QUANTUM_TASKS_QUEUE: "QUANTUM_TASKS_QUEUE",
};
export const QueuePriority = {
    NORMAL: "Normal",
    PRIORITY: "Priority",
};
export const DeviceStatus = {
    OFFLINE: "OFFLINE",
    ONLINE: "ONLINE",
    RETIRED: "RETIRED",
};
export const DeviceType = {
    QPU: "QPU",
    SIMULATOR: "SIMULATOR",
};
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const CancellationStatus = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export const _InstanceType = {
    ML_C4_2XLARGE: "ml.c4.2xlarge",
    ML_C4_4XLARGE: "ml.c4.4xlarge",
    ML_C4_8XLARGE: "ml.c4.8xlarge",
    ML_C4_XLARGE: "ml.c4.xlarge",
    ML_C5N_18XLARGE: "ml.c5n.18xlarge",
    ML_C5N_2XLARGE: "ml.c5n.2xlarge",
    ML_C5N_4XLARGE: "ml.c5n.4xlarge",
    ML_C5N_9XLARGE: "ml.c5n.9xlarge",
    ML_C5N_XLARGE: "ml.c5n.xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_G4DN_12XLARGE: "ml.g4dn.12xlarge",
    ML_G4DN_16XLARGE: "ml.g4dn.16xlarge",
    ML_G4DN_2XLARGE: "ml.g4dn.2xlarge",
    ML_G4DN_4XLARGE: "ml.g4dn.4xlarge",
    ML_G4DN_8XLARGE: "ml.g4dn.8xlarge",
    ML_G4DN_XLARGE: "ml.g4dn.xlarge",
    ML_M4_10XLARGE: "ml.m4.10xlarge",
    ML_M4_16XLARGE: "ml.m4.16xlarge",
    ML_M4_2XLARGE: "ml.m4.2xlarge",
    ML_M4_4XLARGE: "ml.m4.4xlarge",
    ML_M4_XLARGE: "ml.m4.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_LARGE: "ml.m5.large",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_P2_16XLARGE: "ml.p2.16xlarge",
    ML_P2_8XLARGE: "ml.p2.8xlarge",
    ML_P2_XLARGE: "ml.p2.xlarge",
    ML_P3DN_24XLARGE: "ml.p3dn.24xlarge",
    ML_P3_16XLARGE: "ml.p3.16xlarge",
    ML_P3_2XLARGE: "ml.p3.2xlarge",
    ML_P3_8XLARGE: "ml.p3.8xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
};
export class DeviceRetiredException extends __BaseException {
    constructor(opts) {
        super({
            name: "DeviceRetiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeviceRetiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeviceRetiredException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export const HybridJobAdditionalAttributeName = {
    QUEUE_INFO: "QueueInfo",
};
export const JobEventType = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    DEPRIORITIZED_DUE_TO_INACTIVITY: "DEPRIORITIZED_DUE_TO_INACTIVITY",
    DOWNLOADING_DATA: "DOWNLOADING_DATA",
    FAILED: "FAILED",
    MAX_RUNTIME_EXCEEDED: "MAX_RUNTIME_EXCEEDED",
    QUEUED_FOR_EXECUTION: "QUEUED_FOR_EXECUTION",
    RUNNING: "RUNNING",
    STARTING_INSTANCE: "STARTING_INSTANCE",
    UPLOADING_RESULTS: "UPLOADING_RESULTS",
    WAITING_FOR_PRIORITY: "WAITING_FOR_PRIORITY",
};
export const JobPrimaryStatus = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    QUEUED: "QUEUED",
    RUNNING: "RUNNING",
};
export const SearchJobsFilterOperator = {
    BETWEEN: "BETWEEN",
    CONTAINS: "CONTAINS",
    EQUAL: "EQUAL",
    GT: "GT",
    GTE: "GTE",
    LT: "LT",
    LTE: "LTE",
};
export class DeviceOfflineException extends __BaseException {
    constructor(opts) {
        super({
            name: "DeviceOfflineException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeviceOfflineException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeviceOfflineException.prototype);
    }
}
export const QuantumTaskAdditionalAttributeName = {
    QUEUE_INFO: "QueueInfo",
};
export const QuantumTaskStatus = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    COMPLETED: "COMPLETED",
    CREATED: "CREATED",
    FAILED: "FAILED",
    QUEUED: "QUEUED",
    RUNNING: "RUNNING",
};
export const SearchQuantumTasksFilterOperator = {
    BETWEEN: "BETWEEN",
    EQUAL: "EQUAL",
    GT: "GT",
    GTE: "GTE",
    LT: "LT",
    LTE: "LTE",
};
